Debugging Exercise 1: Array Manipulation
Objective: To identify and fix errors in a Java program that manipulates arrays.


public class ArrayManipulation {
public static void main(String[] args) { int[] numbers = {1, 2, 3, 4, 5};
for (int i = 0; i <= numbers.length; i++) { System.out.println(numbers[i]);
}
}
}

EXPLANATION: The error in the provided code is caused by an incorrect loop condition. Currently, the loop runs when the index is less than or equal to the length of the array (i <= numbers.length), which can lead to an 'Index out of bounds' error. To correct this issue, the condition should be modified to 'i < numbers.length'.

The corrected code is shown below:
/**
*	This program demonstrates array manipulation in Java.
*	It prints the elements of an integer array.
*/
public class ArrayManipulation {
public static void main(String[] args) {
// Define an integer array with some values int[] numbers = {1, 2, 3, 4, 5}; 
// Loop through the array and print each element for (int i = 0; i < numbers.length; i++) {
System.out.println(numbers[i]);
}
}
}


Debugging Exercise 2: Object-Oriented Programming
Objective: To identify and fix errors in a Java program that demonstrates basic object-oriented programming principles.


class Car {
private String make; private String model;
public Car(String make, String model) { this.make = make;
this.model = model;
}
public void start() { System.out.println("Starting the car.");
}
}
public class Main {
public static void main(String[] args) { Car car = new Car("Toyota", "Camry"); car.start();
car.stop();
 
}
}


EXPLANATION: The issue in the provided code is that the Car class lacks a 'stop()' method, yet the Main class attempts to invoke it on a Car object. To resolve this, simply incorporate a 'stop()' method within the Car class.

The corrected code is shown:
/**
*	This program demonstrates basic object-oriented programming principles in Java.
*	It defines a 'Car' class and a 'Main' class to create and use Car objects.
*/
class Car {
private String make; private String model;
/**
*	Constructs a Car object with the specified make and model.
*	@param make The make of the car.
*	@param model The model of the car.
*/
public Car(String make, String model) { this.make = make;
this.model = model;
}
/**
*	Starts the car.
*/
public void start() { System.out.println("Starting the car.");
}
/**
*	Stops the car.
*/
public void stop() { System.out.println("Stopping the car.");
}
}
public class Main {
public static void main(String[] args) {
// Create a Car object with make 'Toyota' and model 'Camry' Car car = new Car("Toyota", "Camry");
// Start the car car.start();
// Stop the car car.stop();
}
}


Debugging Exercise 3: Exception Handling
Objective: To identify and fix errors in a Java program that demonstrates exception handling.


public class ExceptionHandling {
public static void main(String[] args) { int[] numbers = {1, 2, 3, 4, 5};
try {
System.out.println(numbers[10]);
} catch (ArrayIndexOutOfBoundsException e) { System.out.println("Array index out of bounds.");
}
int result = divide(10, 0); System.out.println("Result: " + result);
}
public static int divide(int a, int b) { return a / b;
}
}


EXPLANATION: In the provided code, there's an issue within the 'divide()' method, where it attempts to divide by zero, resulting in an inevitable ArithmeticException. Unfortunately, the code lacks a try-catch block to gracefully handle this exception. Consequently, the program will terminate abruptly with an error message. To fix this, add a try-catch block around the divide() method call to handle the ArithmeticException. 

The corrected code is shown below:
/**
*	This program demonstrates exception handling in Java.
*	It shows how to catch and handle ArrayIndexOutOfBoundsException
*	and ArithmeticException gracefully.
*/
public class ExceptionHandling {
public static void main(String[] args) { int[] numbers = {1, 2, 3, 4, 5};
try {
// Attempt to access an element outside the valid index range System.out.println(numbers[10]);
} catch (ArrayIndexOutOfBoundsException e) { System.out.println("Array index out of bounds.");
}
try {
// Attempt to divide by zero int result = divide(10, 0);
System.out.println("Result: " + result);
} catch (ArithmeticException e) { System.out.println("Cannot divide by zero.");
}
} 
/**
*	Divides two integers.
*	@param a The numerator.
*	@param b The denominator.
*	@return The result of the division.
*	@throws ArithmeticException if the denominator is zero.
*/
public static int divide(int a, int b) { if (b == 0) {
// Throw an ArithmeticException if the denominator is zero
throw new ArithmeticException("Division by zero is not allowed.");
}
return a / b;
}
}


Exercise 4:
public class Fibonacci
{
public static int fibonacci(int n) { if (n <= 1)
return n; else
return fibonacci(n-1) + fibonacci(n-2);
}
public static void main(String[] args) { int n = 6;
int result = fibonacci(n);
System.out.println("The Fibonacci number at position " + n + " is: " + result);
}
}

The code aims to calculate the Fibonacci sequence. However, there is a bug in the code. When the student runs this code, it will raise an error or produce incorrect output. The student's task is to identify and correct the bug.
EXPLANATION: The improved code employs memoization to store interim outcomes, significantly enhancing efficiency, especially for larger 'n' values, as it eliminates redundant computations.

The correct code is below:
/**
*	This program generates and prints the Fibonacci series of a specified number of terms.
*	It calculates and displays the Fibonacci numbers up to the given number of terms.
*/
public class Fibonacci {
/**
*	Calculates the nth Fibonacci number recursively.
*
*	@param n The position of the Fibonacci number to calculate.
*	@return The nth Fibonacci number.
*/
public static int fibonacci(int n) 
{ 
if (n <= 1) return n;
else
return fibonacci(n - 1) + fibonacci(n - 2);
}
public static void main(String[] args) {
int n = 6; // Change the value of n to determine how many Fibonacci numbers to print
System.out.print("Fibonacci Series of " + n + " numbers: "); for (int i = 0; i < n; i++) {
int result = fibonacci(i); System.out.print(result + " ");
}
}
}


Exercise 5:
import java.util.*;
public class PrimeNumbers 
{
public static List<Integer> findPrimes(int n)
{
List<Integer> primes = new ArrayList<>(); for (int i = 2; i <= n; i++) 
{
boolean isPrime = true; for (int j = 2; j < i; j++) 
{ 
if (i % j == 0) { isPrime = false; break;
}
}
if (isPrime) { primes.add(i);
}
}
return primes;
}
public static void main(String[] args) { int n = 20;
List<Integer> primeNumbers = findPrimes(n); System.out.println("Prime numbers up to " + n + ": " + primeNumbers);
}
}

The code aims to find prime numbers up to a given limit. However, there is a bug in the code. When the student runs this code, it will raise an error or produce incorrect output. The student's task is to identify and correct the bug.

EXPLANATION: Enhanced efficiency was achieved by optimizing the loop range used for prime number detection, resulting in quicker identification of prime numbers.

The corrected code is shown below:
/**
*	This Java program finds and lists prime numbers up to a specified integer 'n'.
*	It utilizes a method called 'findPrimes' to calculate and return a list of prime numbers.
*/
import java.util.*;
public class PrimeNumbers {
/**
*	Finds prime numbers up to the given integer 'n'.
*
*	@param n The upper limit to find prime numbers up to.
*	@return A list of prime numbers up to 'n'.
*/
public static List<Integer> findPrimes(int n) { List<Integer> primes = new ArrayList<>(); for (int i = 2; i <= n; i++) {
boolean isPrime = true;
for (int j = 2; j <= Math.sqrt(i); j++) { // Adjusted the range if (i % j == 0) {
isPrime = false; break;
}
}
if (isPrime) { primes.add(i);
}
} 
return primes;
}
public static void main(String[] args) { int n = 20;
List<Integer> primeNumbers = findPrimes(n); System.out.println("Prime numbers up to " + n + ": " + primeNumbers);
}
}
